/*
 Copyright 2014 John Duane. All rights reserved.
 Use of this source code is governed by a BSD-style license that can be
 found in the LICENSE file.

 The following code processes a file type of "cpuprofile" generated by Chrome's developer tools.
 The intent is to expose a simplified version of the file that rolls up all unique combination of url and function
 into a single object that contains the time spent in that function.

 The code takes as input the path to a cpuprofile file and generates a 'profileHash' object containing:
 - Object hash key of url|function
 - url: string; typically to a JavaScript file
 - function: string; typically a minified function name
 - time: number; the total cpu time spent in the function

 */

module.exports = Profile;

var WebInspector = require('./CPUProfileDataModel.js');
var fs = require('fs');

function Profile(filePath) {
    try {
        var profile = JSON.parse(fs.readFileSync(filePath));
        this.cpuProfile = new WebInspector.CPUProfileDataModel(profile);
        this.profileHash = {};
        this._processNode(this.cpuProfile.profileHead);
    }
    catch(e) {
        profile = null;
        this.cpuProfile = null;
        this.profileHash = null;
        throw(e);
    }
}

Profile.prototype = {

    generateDetails: function() {
        var tsv = "URL\tFunction\tTotal Time\n";
        var keys = Object.keys(this.profileHash);
        for(var i=0; i<keys.length; i++) {
            tsv +=
                this.profileHash[keys[i]].url + "\t" +
                this.profileHash[keys[i]].functionName + "\t" +
                this.profileHash[keys[i]].time + '\n';
        }
        return tsv;
    },

    generateSummary: function() {
        var tsv = "URL\tTotal Time\tUsage Count\n";
        var outputHash = this._getHashForUrl();
        var keys = Object.keys(outputHash);
        var i;
        for (i = 0; i < keys.length; i++) {
            tsv += outputHash[keys[i]].url + "\t" + outputHash[keys[i]].time + "\t" + outputHash[keys[i]].usageCount + '\n';
        }
        return tsv;
    },

    getUrlProfileInformation: function(url) {
        return this._getHashForUrl(url);
    },

    _getHashForUrl: function(url) {
        var keys = Object.keys(this.profileHash);
        var outputHash = {};
        var i;
        for (i = 0; i < keys.length; i++) {
            if (!url || url === this.profileHash[keys[i]].url) {
                if (!outputHash[this.profileHash[keys[i]].url]) {
                    outputHash[this.profileHash[keys[i]].url] = {
                        url: this.profileHash[keys[i]].url,
                        time: this.profileHash[keys[i]].time,
                        usageCount: 1
                    };
                }
                else {
                    outputHash[this.profileHash[keys[i]].url].time += this.profileHash[keys[i]].time;
                    outputHash[this.profileHash[keys[i]].url].usageCount++;
                }
            }
        }
        return outputHash;
    },

    _processNode: function(node) {
        var nodeUrl = node.url;
        if (nodeUrl === "")
            nodeUrl = getParentUrl(node);
        if (nodeUrl === "")
            nodeUrl = node.functionName;

        var key = nodeUrl + "|" + node.functionName;

        if (!this.profileHash[key]) {
            this.profileHash[key] = {
                url: nodeUrl,
                functionName: node.functionName,
                time: node.selfTime
            }
        }
        else {
            this.profileHash[key].selfTime += node.selfTime;
        }
        for (var i = 0; i < node.children.length; i++) {
            this._processNode(node.children[i]);
        }

        function getParentUrl(node) {
            while (node.parent && node.url === "")
                node = node.parent;
            return node.url;
        }
    }

};
